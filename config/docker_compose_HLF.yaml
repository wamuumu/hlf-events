
volumes:
  orderer1_data:
  orderer2_data:
  peer0_org1_data:
  peer0_org2_data:
  peer0_org3_data:

networks:
  fabric_net:
    name: fabric_net

services:
##################
# HLF components #
##################
  orderer1.ord.testbed.local:
    container_name: orderer1.ord.testbed.local
    image: hyperledger/fabric-orderer:2.5
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      # IF not present, same as above
      #- ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      #- ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      #- ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true # deprecated, must be set to true
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7051
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    # same as default dockerfile
    # command: orderer start
    volumes:
     # - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer1.ord.testbed.local/msp:/var/hyperledger/orderer/msp
     # - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer1.ord.testbed.local/tls:/var/hyperledger/orderer/tls
      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer1.ord.testbed.local:/var/hyperledger/orderer
      - orderer1_data:/var/hyperledger/production/orderer
      - ../runtime/genesis.block:/etc/hyperledger/fabric/mychannel/genesis.block


      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/etc/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org1.testbed.local:ro # Ensure this covers Org1's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org2.testbed.local:ro # Ensure this covers Org2's TLS CA
      - ./orderer.yaml:/etc/hyperledger/fabric/orderer.yaml

    ports:
      - 7050:7050
      - 7051:7051
      - 8443:8443
    networks:
      - fabric_net

  orderer2.ord.testbed.local:
    container_name: orderer2.ord.testbed.local
    image: hyperledger/fabric-orderer:2.5
    environment:
      #- FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      # IF not present, same as above
      #- ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      #- ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      #- ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true # deprecated, must be set to true
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7051
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /root
    # same as default dockerfile
    # command: orderer start
    volumes:
     # - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer1.ord.testbed.local/msp:/var/hyperledger/orderer/msp
     # - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer1.ord.testbed.local/tls:/var/hyperledger/orderer/tls
      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/orderers/orderer2.ord.testbed.local:/var/hyperledger/orderer
      - orderer2_data:/var/hyperledger/production/orderer
      - ../runtime/genesis.block:/etc/hyperledger/fabric/mychannel/genesis.block


      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/etc/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org1.testbed.local:ro # Ensure this covers Org1's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org2.testbed.local:ro # Ensure this covers Org2's TLS CA
      #- ./orderer.yaml:/etc/hyperledger/fabric/orderer.yaml
    ports:
      - 8050:7050
      - 8051:7051
      - 9443:8443
    networks:
      - fabric_net
  peer0.org1.testbed.local:
    container_name: peer0.org1.testbed.local
    image: hyperledger/fabric-peer:2.5
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_net

      #- FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      #- FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/peers/peer0.org1.testbed.local/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/peers/peer0.org1.testbed.local/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/peers/peer0.org1.testbed.local/tls/ca.crt
      - CORE_PEER_ID=peer0.org1.testbed.local
      - CORE_PEER_ADDRESS=peer0.org1.testbed.local:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.testbed.local:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.testbed.local:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.testbed.local:7051
      - CORE_PEER_LOCALMSPID=Org1
      - BASE_MSPCONFIGPATH=/etc/hyperledger/fabric
      - PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org1.testbed.local/msp
      - ADMIN_MSPCONFIGPATH=/etc/hyperledger/fabric/users/Admin@org1.testbed.local/msp
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org1.testbed.local/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer0.org1.testbed.local:9444
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer0org1"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - ORDERER_CA=/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem

    working_dir: /root
    # same as dockerfile
    #command: peer node start

    volumes:
      #- ./docker/peercfg:/etc/hyperledger/peercfg
      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric
      - peer0_org1_data:/var/hyperledger/production
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../runtime/genesis.block:/etc/hyperledger/fabric/mychannel/genesis.block
      - ../chaincode:/var/hyperledger/chaincode_source


      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/etc/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org1.testbed.local:ro # Ensure this covers Org1's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org2.testbed.local:ro # Ensure this covers Org2's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org3.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org3.testbed.local:ro # Ensure this covers Org3's TLS CA
      - ./core.yaml:/etc/hyperledger/fabric/core.yaml
    ports:
      - 17051:7051
      - 19444:9444
    networks:
      - fabric_net
  peer0.org2.testbed.local:
    container_name: peer0.org2.testbed.local
    image: hyperledger/fabric-peer:2.5
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_net

      #- FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      #- FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/peers/peer0.org2.testbed.local/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/peers/peer0.org2.testbed.local/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/peers/peer0.org2.testbed.local/tls/ca.crt
      - CORE_PEER_ID=peer0.org2.testbed.local
      - CORE_PEER_ADDRESS=peer0.org2.testbed.local:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.testbed.local:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.testbed.local:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.testbed.local:7051
      - CORE_PEER_LOCALMSPID=Org2
      - BASE_MSPCONFIGPATH=/etc/hyperledger/fabric
      - PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org2.testbed.local/msp
      - ADMIN_MSPCONFIGPATH=/etc/hyperledger/fabric/users/Admin@org2.testbed.local/msp
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org2.testbed.local/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer0.org2.testbed.local:9444
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer0org2"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - ORDERER_CA=/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem

    working_dir: /root
    # same as dockerfile
    #command: peer node start

    volumes:
      #- ./docker/peercfg:/etc/hyperledger/peercfg
      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric
      - peer0_org2_data:/var/hyperledger/production
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../runtime/genesis.block:/etc/hyperledger/fabric/mychannel/genesis.block
      - ../chaincode:/var/hyperledger/chaincode_source


      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/etc/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org1.testbed.local:ro # Ensure this covers Org1's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org2.testbed.local:ro # Ensure this covers Org2's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org3.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org3.testbed.local:ro # Ensure this covers Org3's TLS CA
      - ./core.yaml:/etc/hyperledger/fabric/core.yaml
    ports:
      - 27051:7051
      - 29444:9444
    networks:
      - fabric_net

  peer0.org3.testbed.local:
    container_name: peer0.org3.testbed.local
    image: hyperledger/fabric-peer:2.5
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_net

      #- FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      #- FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/peers/peer0.org3.testbed.local/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/peers/peer0.org3.testbed.local/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/peers/peer0.org3.testbed.local/tls/ca.crt
      - CORE_PEER_ID=peer0.org3.testbed.local
      - CORE_PEER_ADDRESS=peer0.org3.testbed.local:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org3.testbed.local:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org3.testbed.local:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org3.testbed.local:7051
      - CORE_PEER_LOCALMSPID=Org3
      - BASE_MSPCONFIGPATH=/etc/hyperledger/fabric
      - PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org3.testbed.local/msp
      - ADMIN_MSPCONFIGPATH=/etc/hyperledger/fabric/users/Admin@org3.testbed.local/msp
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peers/peer0.org3.testbed.local/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer0.org3.testbed.local:9444
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer0org3"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - ORDERER_CA=/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem

    working_dir: /root
    # same as dockerfile
    #command: peer node start

    volumes:
      #- ./docker/peercfg:/etc/hyperledger/peercfg
      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/var/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org3.testbed.local:/etc/hyperledger/fabric
      - peer0_org3_data:/var/hyperledger/production
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../runtime/genesis.block:/etc/hyperledger/fabric/mychannel/genesis.block
      - ../chaincode:/var/hyperledger/chaincode_source


      - ../runtime/crypto-config/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:/etc/hyperledger/fabric/ordererOrganizations/ord.testbed.local/tlsca/tlsca.ord.testbed.local-cert.pem:ro
      - ../runtime/crypto-config/peerOrganizations/org1.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org1.testbed.local:ro # Ensure this covers Org1's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org2.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org2.testbed.local:ro # Ensure this covers Org2's TLS CA
      - ../runtime/crypto-config/peerOrganizations/org3.testbed.local:/etc/hyperledger/fabric/peerOrganizations/org3.testbed.local:ro # Ensure this covers Org3's TLS CA
      - ./core.yaml:/etc/hyperledger/fabric/core.yaml
    ports:
      - 37051:7051
      - 39444:9444
    networks:
      - fabric_net  