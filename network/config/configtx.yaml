Organizations:
  - &Ord1
    Name: Ord1
    ID: Ord1MSP
    MSPDir: ../identities/ord1.testbed.local/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Ord1MSP.member')" #member matches any user of the organization
      Writers:
        Type: Signature
        Rule: "OR('Ord1MSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('Ord1MSP.admin')"
    OrdererEndpoints:
      - orderer.ord1.testbed.local:7050
  
  - &Ord2
    Name: Ord2
    ID: Ord2MSP
    MSPDir: ../identities/ord2.testbed.local/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Ord2MSP.member')" #member matches any user of the organization
      Writers:
        Type: Signature
        Rule: "OR('Ord2MSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('Ord2MSP.admin')"
    OrdererEndpoints:
      - orderer.ord2.testbed.local:8050
  
  - &Org1
    Name: Org1
    ID: Org1MSP
    MSPDir: ../identities/org1.testbed.local/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org1MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org1MSP.peer')"
    AnchorPeers:
      - Host: peer0.org1.testbed.local #must be properly assigned through DNS (In docker compose through container name)
        Port: 7051
  
  - &Org2
    Name: Org2
    ID: Org2MSP
    MSPDir: ../identities/org2.testbed.local/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org2MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org2MSP.peer')"
    AnchorPeers:
      - Host: peer0.org2.testbed.local #must be properly assigned through DNS (In docker compose through container name)
        Port: 8051
  
  - &Org3
    Name: Org3
    ID: Org3MSP
    MSPDir: ../identities/org3.testbed.local/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org3MSP.admin', 'Org3MSP.peer', 'Org3MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org3MSP.admin', 'Org3MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org3MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org3MSP.peer')"
    AnchorPeers:
      - Host: peer0.org3.testbed.local #must be properly assigned through DNS (In docker compose through container name)
        Port: 9051

Capabilities: #all defined at v2 since we don't need retrocompatibility and want to empoy newest features
  Channel: &ChannelCapabilities
    V2_0: true

  Orderer: &OrdererCapabilities
    V2_0: true

  Application: &ApplicationCapabilities
    V2_5: true

Application: &ApplicationDefaults
  Organizations: #This is left balnk sunnce I'm defining a template, once it is used (later in the file), organizations will be defined (and merged with this empty set)

  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    LifecycleEndorsement: #Policy that defines the condition necessary for a chaincode to be installed/updated
      Type: ImplicitMeta
      Rule: "ALL Endorsement" #Default is MAJORITY
    Endorsement: #Policy that defines the condition necessary for a transaction to be approved
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"

  Capabilities:
    <<: *ApplicationCapabilities

Orderer: &OrdererDefaults
  OrdererType: etcdraft
  
  Addresses:
    - orderer.ord1.testbed.local:7050
    - orderer.ord2.testbed.local:8050

  # Batch configuration: settings for batch time and size
  BatchTimeout: 2s
  BatchSize:
    MaxMessageCount: 10
    AbsoluteMaxBytes: 99 MB
    PreferredMaxBytes: 512 KB

  Policies:
    Readers:
      Type: Signature
      Rule: "OR('Ord1MSP.member', 'Ord2MSP.member')"  # All members of the OrdererMSPs can read
    Writers:
      Type: Signature
      Rule: "OR('Ord1MSP.member', 'Ord2MSP.member')"  # All members of the OrdererMSPs can write
    Admins:
      Type: Signature
      Rule: "OR('Ord1MSP.admin', 'Ord2MSP.admin')"  # Only admins of the OrdererMSPs can manage the orderer
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"  # Any writer can validate blocks

  

# Channel Defaults (for consistency in the channel configuration)
Channel: &ChannelDefaults
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
  Capabilities:
    <<: *ChannelCapabilities

Profiles:
  ChannelUsingRaft:
    <<: *ChannelDefaults
    Orderer:
      <<: *OrdererDefaults
      EtcdRaft:
        Consenters:
          - Host: orderer.ord1.testbed.local
            Port: 7050
            ClientTLSCert: ../identities/ord1.testbed.local/tls/server.crt
            ServerTLSCert: ../identities/ord1.testbed.local/tls/server.crt
          - Host: orderer.ord2.testbed.local
            Port: 8050
            ClientTLSCert: ../identities/ord2.testbed.local/tls/server.crt
            ServerTLSCert: ../identities/ord2.testbed.local/tls/server.crt
      Organizations:
        - *Ord1
        - *Ord2
      Capabilities: *OrdererCapabilities
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
        - *Org3
      Capabilities: *ApplicationCapabilities
    Consortium: ConsortiumName # Assign a name ?